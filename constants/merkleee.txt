// SPDX-License-Identifier: MIT

// Edited By LAx
/**

*/

pragma solidity >=0.7.0 <0.9.0;


import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

interface IERC20 {
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  function balanceOf(address account) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
}
interface IERC721 {
  function transferFrom(address from, address to, uint256 tokenId) external;
}


contract TabooMerkleTree is Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    IERC721 public nftAddress ;
    IERC20 public tokenAddress ;   //usdt mainnet 0xdAC17F958D2ee523a2206206994597C13D831ec7
    address [] investers;
    

  bytes32 public merkleRoot = 0x8bef28f0ac54da10614be726622f54ce02e3736d8f100ee126f3bfed268ef0ef;

//max claiming per user rounds  
//uint public MaxClaimAmount = 10;
  //mapping variables checking if already claimed
    mapping(address => bool) public whitelistClaimed ;
  //mapping variables checking NFT amount per wallet
   uint256 public amountClaimed ;
        // Store each nft apy(ntfId->apy)
    mapping(address => uint256) public nftAmount;


   constructor( address  _nft,   address _tokenAddress ) {
     nftAddress = IERC721(_nft) ;
     tokenAddress= IERC20(_tokenAddress);
     initAmount();
  }

  function totalSupply() public view returns (uint256) {
    return _tokenIdCounter.current();
  }

 function whitelistMint(uint256 _mintAmount, bytes32[] calldata _merkleProof) public {
    uint256 amount = nftAmount[msg.sender];
    // Verify whitelist requirements
    require(!whitelistClaimed[msg.sender], "Address already claimed!");
    require(_mintAmount <= amount, "Max amount exceeded" );
//    require (_mintAmount <= MaxClaimAmount , "Max amount exceeded") ;     
    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
    require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Invalid proof!");
 

    whitelistClaimed[msg.sender] = true;
    investers.push(msg.sender) ; // to reset mapping
    _mintLoop(msg.sender, _mintAmount);
  }

  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
    merkleRoot = _merkleRoot;
  }

    function setNftAddress(IERC721 _nftAddress) public onlyOwner {
    nftAddress = _nftAddress;
  }

     function setTokenAddress(IERC20 _tokenAddress) public onlyOwner {
    tokenAddress = _tokenAddress;
  }

  //   function setMaxAmount(uint _claimAmount) public onlyOwner {
  //   MaxClaimAmount = _claimAmount;
  // }

  function resetBalance() public onlyOwner {
    for (uint i=0; i< investers.length ; i++){
        whitelistClaimed[investers[i]] = false;
    }
  }

    function usdtBalance(address _to) public view returns (uint256) {
          return tokenAddress.balanceOf(_to);
    }


  function _mintLoop(address _receiver, uint256 _mintAmount) internal {
    for (uint256 i = 0; i < _mintAmount; i++) {
      _tokenIdCounter.increment();
         uint256 tokenId = _tokenIdCounter.current();
         //transfer nft to claimer
          nftAddress.transferFrom(owner(), _receiver,tokenId) ;       
         //send usdt
        tokenAddress.transferFrom(owner(), _receiver, 7*10**6);  //to change to real amount
     amountClaimed+=1 ;
    }
  }

      function setAmountByClaimer(address _claimer, uint256 _amount) public onlyOwner {
        require(_amount > 0, "nft and amount must > 0");
        nftAmount[_claimer] = _amount;
    }


  function initAmount() internal onlyOwner {
        nftAmount[0x479eec2Ed1Da9Ec2e8467EF1DC72fd9cE848e1C3] = 5;
        nftAmount[0x562C2435a6692f1801d140482A05194D6D388254] = 3;
        nftAmount[0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db] = 2;
    
    }

}
