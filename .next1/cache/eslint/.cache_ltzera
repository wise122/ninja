[{"C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\api\\hello.js":"1","C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\index.js":"2","C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\_app.js":"3"},{"size":170,"mtime":1645689940000,"results":"4","hashOfConfig":"5"},{"size":5277,"mtime":1648575309958,"results":"6","hashOfConfig":"5"},{"size":580,"mtime":1648550292849,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1smi3ua",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\api\\hello.js",[],[],"C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\index.js",["18","19"],[],"import Head from \"next/head\";\nimport Image from \"next/image\";\nimport styles from \"../styles/Home.module.css\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { abi } from \"../constants/abis\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"react-simple-snackbar\";\n//merkle tree param\nconst { MerkleTree } = require(\"merkletreejs\");\nconst keccak256 = require(\"keccak256\");\nconst tokens = require(\"../constants/tokens.json\");\n\nexport const injected = new InjectedConnector();\n\nexport default function Home() {\n  const [openSnackbar, closeSnackbar] = useSnackbar();\n  const [hasMetamask, setHasMetamask] = useState(false);\n  const [amount, setAmount] = useState(1);\n  const [verified, setVerified] = useState(false);\n  const [proofs, setProof] = useState(\"\");\n  const [totalAmount, setTotalAmount] = useState(\"\");\n  const [PersonalAmount, setPersonalAmount] = useState(0);\n  const [claimed, setClaimed] = useState(\"\");\n\n  const contractAddress = \"0x665cb2100139417Bdf49A2b410DB842615baA167\";\n\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      setHasMetamask(true);\n      //    inWL();\n    }\n  });\n\n  const {\n    active,\n    activate,\n    chainId,\n    account,\n    onChangeAccount,\n    library: provider,\n  } = useWeb3React();\n\n  async function connect() {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        await activate(injected);\n        setHasMetamask(true);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  async function inWL() {\n    if (active) {\n      //get address wl\n      let tab = [];\n      tokens.map((token) => {\n        tab.push(token.address);\n      });\n      const leaves = tab.map((addr) => keccak256(addr));\n      const tree = new MerkleTree(leaves, keccak256, { sortPairs: true });\n      const root = tree.getRoot().toString(\"hex\");\n      const leaf = keccak256(account);\n      const proof = tree.getHexProof(leaf);\n      console.log(\"root:\", \"0x\" + root); //0x8bef28f0ac54da10614be726622f54ce02e3736d8f100ee126f3bfed268ef0ef\n      // console.log(\"proof:\", proof); // true\n      setProof(proof);\n      setVerified(tree.verify(proof, leaf, root));\n      console.log(\"verified?\", tree.verify(proof, leaf, root)); // true\n    }\n  }\n\n  useEffect(() => {\n    if (active) {\n      inWL();\n    }\n  }, [active]);\n\n  async function execute() {\n    if (active) {\n      const signer = provider.getSigner();\n      // const contractAddress = \"0x10C33D5E79d3e76d099247aBb72B6d6C3c3c24B5\";\n      const contract = new ethers.Contract(contractAddress, abi, signer);\n\n      //open to public\n      const paused = await contract.paused();\n      const whitelistMintEnabled = await contract.whitelistMintEnabled();\n\n      try {\n        if (verified && paused == true && whitelistMintEnabled == true) {\n          let sym = await contract.whitelistMint(amount, proofs, {\n            value: await contract.cost(),\n          });\n          console.log(sym);\n        } else if (paused == false) {\n          let sym = await contract.mint(amount, {\n            value: await contract.cost(),\n          });\n          console.log(sym);\n        }\n      } catch (error) {\n        openSnackbar(error.message);\n        console.log(error);\n      }\n    } else {\n      console.log(\"Please install MetaMask\");\n    }\n  }\n\n  const decrementMintAmount = () => {\n    let newMintAmount = amount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = amount + 1;\n    if (newMintAmount > 5) {\n      newMintAmount = 5;\n    }\n    setAmount(newMintAmount);\n  };\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Mouth Breathers Claiming dapp</title>\n        <meta name=\"description\" content=\"Mouth Breathers Dapp Nft claim\" />\n      </Head>\n\n      <main className={styles.main}>\n        <Image src=\"/logo.png\" alt=\"Mouth Logo\" width={1920} height={640} />\n        <h1 className={styles.title}>A BREATH OF FRESH RARE</h1>\n        <p>Mint Price (0.1 ETH + Gas).</p>\n        <p>Maximum of 5 Mouth Breathers per transaction.</p>\n        <div className={styles.grid}>\n          {/* <div className={styles.card}> */}\n          {hasMetamask ? (\n            active ? (\n              <section>\n                <button\n                  className={styles.sidebtn}\n                  onClick={() => decrementMintAmount()}\n                >\n                  -\n                </button>\n                <button\n                  className={styles.btn}\n                  onClick={() => execute()}\n                >\n                  {\" \"}\n                  Mint {amount}\n                </button>\n                <button\n                  className={styles.sidebtn}\n                  onClick={() => incrementMintAmount()}\n                >\n                  +\n                </button>\n              </section>\n            ) : (\n              <button className={styles.btn} onClick={() => connect()}>\n                CONNECT\n              </button>\n            )\n          ) : (\n            \"Install Metamask\"\n          )}\n        </div>\n        {/* </div> */}\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\alira\\Downloads\\mouthBreathers-merkletree - Copy\\pages\\_app.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":29,"column":3,"nodeType":"22","endLine":29,"endColumn":12,"suggestions":"23"},{"ruleId":"20","severity":1,"message":"24","line":80,"column":6,"nodeType":"25","endLine":80,"endColumn":14,"suggestions":"26"},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setHasMetamask'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["27"],"React Hook useEffect has a missing dependency: 'inWL'. Either include it or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},{"desc":"31","fix":"32"},"Add dependencies array: []",{"range":"33","text":"34"},"Update the dependencies array to be: [active, inWL]",{"range":"35","text":"36"},[1252,1252],", []",[2406,2414],"[active, inWL]"]